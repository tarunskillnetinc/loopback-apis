import { AxiosResponse } from 'axios';
import { VtexDataSource } from '../datasources';
export declare class VtexService {
    protected dataSource: VtexDataSource;
    constructor(dataSource: VtexDataSource);
    fetchFromEndpoint(endpoint: string): Promise<any>;
    handleErrorResponse(error: any): any;
    cartFetchFromEndpoint(endpoint: string): Promise<any>;
    fetchSfFromEndpoint(endpoint: string): Promise<any>;
    vtexCategoryTreeLoopbackFetchFromEndpoint(endpoint: string): Promise<any>;
    getVtexCategoryTree(): Promise<any>;
    getVtexCategoryTreeloopback(): Promise<any>;
    functionVtexCategoryTreeLoopbackForData(responseData: any): Promise<any>;
    getVtexCollection(collectionId: string): Promise<any>;
    getVtexProducListingPage(categoryId: String): Promise<any>;
    getVtexProductDetails(productId: string): Promise<any>;
    getProductById(pid: string): Promise<any>;
    getVtexCartDetails(cartId: any): Promise<any>;
    getTransformCartDetails(cartData: any): Promise<{
        products: any[];
        totalizers: any;
    }>;
    getTransformedVtexProductDetails(productId: string): Promise<any>;
    getBestSellingProducts(): Promise<any>;
    getBestSellingProductsrating(): Promise<any>;
    getTopSellingProductsrating(): Promise<any>;
    getNewSellingProducts(): Promise<any>;
    getVtexProductByCategory(categoryId: any, color: any, size: any, minprice: any, maxprice: any, sortbyprice: any, sortbyname: any, count: any, page: any): Promise<any>;
    getVtexProductBySubCategory(subCategoryId: any, color: any, size: any, minprice: any, maxprice: any, sortbyprice: any, sortbyname: any, count: any, page: any): Promise<any>;
    getVtexProductByQuery(query: any, color: any, size: any, minprice: any, maxprice: any, sortbyprice: any, sortbyname: any, count: any, page: any): Promise<any>;
    getAProductById(pid: string): Promise<any>;
    getOrCreateCartId(token: any): Promise<any>;
    private transformProductDetails;
    private vtextransformCategoryTreeloopback;
    private CategroychildrenDataloopback;
    private vtextransformCategoryTree;
    private CategroychildrenData;
    private transformVtexProductDetailPage;
    startLogin(email: string, password: string): Promise<any>;
    validateLogin(email: string, password: string): Promise<any>;
    startLogins(email: string): Promise<AxiosResponse<any>>;
    vtexlogin(email: string): Promise<AxiosResponse<any>>;
    validateLogins(email: string, password: string, auth: any): Promise<AxiosResponse<any>>;
    createSession(response: any): Promise<any>;
    login(email: any, password: any): Promise<{
        status: string;
        statusText: string;
        message: string;
        validation?: undefined;
        session?: undefined;
    } | {
        validation: any;
        session: any;
        status?: undefined;
        statusText?: undefined;
        message?: undefined;
    }>;
    createCustomerCart(customerId: any, token: any): Promise<any>;
    addItems(orderFormId: any, requestBody: any): Promise<any>;
    updateCartItem(orderFormId: any, requestBody: any): Promise<any>;
    deleteCartItem(orderFormId: any, item_id: any): Promise<any>;
    getCartItems(orderFormId: any): Promise<any>;
    sfBestSelling(): Promise<any>;
    salesForceProduct(pid: any): Promise<any>;
    searchByFacets(category: string, color: any, size: any, minprice: any, maxprice: any, sortbyprice: any, sortbyname: any, count: Number, page: Number): Promise<any>;
    getUserProfileDetails(email: string): Promise<any>;
    facetsResults(parentCategory: string, color: any, size: any, minprice: any, maxprice: any, sortbyprice: any, sortbyname: any, count: Number, page: Number): Promise<any>;
    placeOrder(basketId: string, requestBody: any): Promise<any>;
    placeOrderEndpoint(endpoint: any, requestBody: any): Promise<any>;
    approvePayment(transactionId: any, requestBody: any): Promise<any>;
    approvePaymentEndpoint(endpoint: any, requestBody: any): Promise<any>;
}
